//по сути middleware это обычная ф-ция,кот. позволяет перехватывать определенные данные и делать логику,кот будет описана ниже в этом файле

const jwt = require('jsonwebtoken')     //в переменную jwt подключенна библиотека,кот. нужна здесь для раскодировки токена
const config = require('config')        //подключаем config для получения секретного ключа jwt токена



//на выходе из файла я буду экспортировать ф-цию,кот будет принимать обычные параметры для middlware в express'е - объект req,res и метод next,кот. позволяет продолжть выполнение запроса
module.exports = (req, res, next) => {
    if (req.method === 'OPTIONS') {     //Базовая проверка.OPTION - спец. метод,кот присутствует REST API,кот. просто проверяет доступность сервера
        return next()       //если это OPTIONS,то мы возвращаем next(), продолжаая делать запрос
    }

    //Дальше,если это обычный запрос POST или GET,то мы это выполняем в блоке try-catch,тк есть потенциальная возможность что у нас будут ошибки

    try {

        const token = req.headers.authorization.split(' ')[1] //authorization - это поле(строкое),кот. мы будем передавать с фронтэнда.Выглядит примерно так: "Bearer TOKEN".Распаршиваем её чтобы получить сам токен методом сплит.Получится массив,где 2-ым элементом с индексом 1 будет токен     //Получаем объект токена

        if (!token) {       //если у нас нет этого токена,то тогда мы делаем
            return res.status(401).json({ message: 'Нет авторизации' })        //401 - статус обозначающий,что нет авторизации.В json отправляем месседж с описанием
        }

        //если токен есть тогда нам нужно его раскодировать
        const decoded = jwt.verify(token, config.get('jwtSecret'))      //метод verify позволяет раскодировать наш токен(2ой параметр - секретный ключ,кот. мы указывали при создании jwt токена)
        req.user = decoded      //когда мы получаем разкодированный токен то по сути мы можем положить его в объект req(создаи там поле user и положили его туда)
        next()                  //метод для продолжения выплнения запроса

    } catch (e) {
        //в случае если у нас произошла ошибка при верификации токена,то выдаем ту же ошибку если бы токена вообще не было(20 строчка блок if)
        res.status(401).json({ message: 'Нет авторизации' })
    }
}






























