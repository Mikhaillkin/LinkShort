//данные роуты в этом файле отвечают за генерацию ссылок,кот. мы собираемся сокращать в приложении.Но для этого мне потребуется создать новую модель Link.js

const {Router} = require('express')
const config = require('config')                            //для получения базового Url
const shortid = require('shortid')                          //библиотека помогающая генерировать корорткие ссылки(часто используется в разработке)
const Link = require('../models/Link')                      //подключение модели
const auth = require('../middleware/auth.middleware')       //подключаю middleware(в express мидлвэр auth можно добавлять т.о. как на 15, 45 и 59 строчках)Теперь наши эндпоинты защищены(неавторизованные пользователи не имеют доступа)
const router = Router()                                     //создание роутера

//в роутере нам придется обработать несколько запросов


//У каждого эндпоинта есть одна общая обработка роутера - модуль try - catch чтобы была валидация и сервер не крашился там безумно.В блоке try описана логика
//post запросом обпрабатываем ссылку generate,кот. бкдет генерировать нам сокращенные ссылки
router.post('/generate', auth, async (req, res) => {
    try {

        //при загрузке нашего приложения на хостинг и прикручивании домена,нам потребуется замена базового URL(хранится в config)

        const baseUrl = config.get('baseUrl')       //получаем базовый Url из config в отдельную переменную(чтобы с ним было удобно работать)
        const {from} = req.body                 //с фронтэнда мы будем получать объект from - тот путь откуда мы вообще делаем данную ссылку.Т.е. в последствии нам нужно будет редиректить пользователя по пути from


        //далее пишем код,кот. нашей ссылке быть короче,т.е. придумать уникальный ключ.Для этого цели подойдет библиотека shortid

        const code = shortid.generate()     //когда мы вызываем метод generate у объекта shortid мы получаем тот уникальный код

        const existing = await Link.findOne({ from })       //проверка есть и уже в базе такая ссылка 'from',занося это в переменную ixisting

        //если уже такая ссылка есть это означает что все данные по ней мы уже сформировали и нет смысла их заново формировать

        if (existing) {
            //если уже такая ссылка есть это означает что все данные по ней мы уже сформировали и нет смысла их заново формировать
            return res.json({ link: existing })     //поэтому просто берм и отправляем её с 200 статусом,кот идет по ум.
            //return здесь нужен,чтобы мы вернули и дальше, тот код который идет после, не выполнялся
        }

        //дальше необходимо сформировать ту ссылку,Кот. будет являться сокращенной и кот. будет работать в нашем сервисе
        //назовем будущую короткую ссылку to
        const to = baseUrl + '/t/' + code       //формируем ее с пом. константы + префикс /t/(что сокращенно от to,в дальнейшем мы будем обрабатывать этот роут) + и собственно сюда мы прибавляем сам код,кот. мы ранее сгенерировали

        const link = new Link({             //далее мы создаем новый объект ссылки,куда мы передаём в конструктор все необходимые параметры
            code, to, from, owner: req.user.userId     //(привязка новой модели ссылки к пользователю)Теперь за сче того что у нас есть мидлвэр в эндпоинтах в объекте req есть поле user,а у него присутствует поле userId(userId - этот объект присутствует в токене,в кот. хранится id пользователя)
                                                        //для того чтобы было доступен такой формат обращения req.user.userId дял owner мы эндпоинту добавили middleware.Чтобы неавторизованные пользователи не могли создавать эти ссылки(защита ссылок)И так делаем на каждом эндпоинте в этом файле
        })

        await link.save()       //сохраняем ссылку,получая обратно Промис

        res.status(201).json({ link })      //Возвращаем 201 статус - статус created И передаем в json мы передаем link
    } catch (e) {
        res.status(500).json({ message: 'Что-то пошло не так, попробуйте снова' })
    }
})



//обработка get запроса,кот. выдаёт все сокращенные ссылки
router.get('/', auth, async (req, res) => {
    try {
        const links = await Link.find({ owner: req.user.userId })       //для получения всех ссылок я получаю объект линкы и жду когда объект линк найдет все ссылки,кот. относятся к текущему пользователю в БД
        //req.user.userId - нам нужно каким-то образом вс фронтэнда получать данные о пользователе,Но сделать мы это можем по jwt токену,в кот. мы закодирвали userId(в файле auth.routes.js)
        //это означает что мы можем добавить определенный middleware для данного роута,кот. будет проверять а авторизован ли пользователь,валидный ли у него jwt
        //и если да,то получать из него необходимые данные
        res.json(links)         //если все хорошо и мы получили ссылки,то в json мы возвращаем links
    } catch (e) {
        res.status(500).json({ message: 'Что-то пошло не так, попробуйте снова' })
    }
})


//обработка get запроса,для получения конкретной ссылки по её id
router.get('/:id', auth, async (req, res) => {
    try {
        const link = await Link.findById(req.params.id)        //получаем отдельную ссылку по id.Для того чтобы получить id мы обратились к полю req.params.id
        res.json(link)                                         //и возвращаем её в json
    } catch (e) {
        res.status(500).json({ message: 'Что-то пошло не так, попробуйте снова' })
    }
})







module.exports = router            //экспортируем роутер (что такое экспорт в nodejs???)































